openapi: 3.0.1
info:
  title: Real time chat
  description: Rest Endpoints for the Real Time Chat
  contact:
    email: casewylie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://petstore.swagger.io/v2
- url: http://petstore.swagger.io/v2
tags:
- name: convo
  description: Endpoint for conversation information
- name: message
  description: Endpoint for message information
- name: user
  description: Endpoint for user information
- name: notification
  description: Endpoint for notification information
paths:
  /convo/{name}:
    get:
      tags:
      - convo
      summary: Find convo by name
      description: Returns a single convo
      operationId: getConvo
      parameters:
      - name: name
        in: path
        description: name of convo to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  participants:
                    type: array
                    items:
                      type: string
                    example: [ "cwylie@redhat.com","jamjones@redhat.com"]
                  _id:
                    type: string
                    example: "5f4fdde8e3a19cd3bbca3996"
                  name:
                    type: string
                    example: ServiceMesh
    delete:
      tags:
      - convo
      summary: Deletes a convo
      operationId: deleteConvo
      parameters:
      # - name: api_key
      #   in: header
      #   schema:
      #     type: string
      - name: name
        in: path
        description: Convo name to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "deleted ServiceMesh"
            
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Pet not found
          content: {}
      security:
      - petstore_auth:
        - write:pets
        - read:pets
  /convo/participant/delete:
    put:
      tags:
      - convo
      summary: Delete a participant from a convo
      operationId: deleteParticipant
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                participantToDelete:
                  type: string
                  example: "cwylie@redhat.com"
                name:
                  type: string
                  example: "ServiceMesh"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated" 
  /convo/participant/add:
    put:
      tags:
      - convo
      summary: Add a participant from a convo
      operationId: addParticipant
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                participantToAdd:
                  type: string
                  example: "cwylie@redhat.com"
                name:
                  type: string
                  example: "ServiceMesh"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
     
    post:
      tags:
      - convo
      summary: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Convo object that needs to be created
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: string
                  example: [ "cwylie@redhat.com","jamjones@redhat.com"]
                name:
                  type: string
                  example: "ServiceMesh"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Created"
     
  /message:
    post:
      tags:
      - message
      summary: Add a new message
      operationId: createMessage
      requestBody:
        description: Message object that needs to be created
        content:
          application/json:
            schema:
              type: object
              properties:
                sender:
                  type: string
                  example: "cwylie@redhat.com"
                payload:
                  type: string
                  example: "Istio 1.6 is awesome"
                convo:
                  type: string
                  example: "ServiceMesh"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Created"
  /message/{id}:
    delete:
      tags:
      - message
      summary: Delete a message
      description: Deletes a message
      operationId: deleteMessage
      parameters:
      - name: id
        in: path
        description: id of the message to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: Deleted message
  
  /message/{convo}:
    get:
      tags:
      - message
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. 
      operationId: getMessage
      parameters:
      - name: convo
        in: path
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                    example:  [
        {
            "_id": "5f5002df4c2d9edf8798299e",
            "sender": "cwylie@redhat.com",
            "payload": "Testing 1 2 3",
            "convo": "ServiceMesh",
            "__v": 0
        }
    ]
                 
  /user:
    get:
      tags:
      - message
      summary: Finds Pets by tags
      description: Muliple tags can be provided with comma separated strings. 
      operationId: getMessage
      parameters:
      - name: convo
        in: path
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                    example: [{"_id":"09sadf","username":"cwylie@redhat.com"},{"_id":"93","username":"jamjones@redhat.com"}]
    post:
      tags:
      - user
      summary: Create a new user
      operationId: createUser
      requestBody:
        description: Username of the user to create
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Created"
  /user/convo/add:
    put:
      tags:
      - user
      summary: Delete a friend for a user
      operationId: addParticipant
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
                convoToAdd:
                  type: string
                  example: "jamjones@redhat.com"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
  /user/convo/delete:
    put:
      tags:
      - user
      summary: Delete a friend for a user
      operationId: addParticipant
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
                convoToDelete:
                  type: string
                  example: "jamjones@redhat.com"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
  /user/friend/add:
    put:
      tags:
      - user
      summary: Delete a friend for a user
      operationId: addParticipant
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
                friendToAdd:
                  type: string
                  example: "jamjones@redhat.com"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
  /user/friend/delete:
    put:
      tags:
      - user
      summary: Delete a friend for a user
      operationId: addParticipant
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
                friendToDelete:
                  type: string
                  example: "jamjones@redhat.com"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
  /user/{username}:
     get:
      tags:
      - user
      summary: Get a specific user
      description: Get a user by the username 
      operationId: getUser
      parameters:
      - name: username
        in: path
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: object
                    example: {
                              "friends": [],
                              "convos": [],
                              "_id": "5f501bd0cd1223e48c73cf87",
                              "username": "cwylie@redhat.com",
                              "__v": 0
                          }
    delete:
      tags:
      - user
      summary: Deletes a user
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: Tags to filter by
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "deleted cwylie@redhat.com"
  /notification/{username}
    get:
      tags:
       - notification
      summary: Deletes a notification
      operationId: deleteNotification
      parameters:
      - name: username
        in: path
        description: Username of notifation to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
      
    delete:
      tags:
      - notification
      summary: Deletes a notification
      operationId: deleteNotification
      parameters:
      - name: username
        in: path
        description: Username of notifation to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "deleted cwylie@redhat.com"
    post:
      tags:
      - notification
      summary: Create a notification for a user 
      operationId: createNotification
      requestBody:
        description: Username of the user to create
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
        required: true
      responses:
        201:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Created"
  /notification/add:
    put:
      tags:
      - notification
      summary: Add a notification for a user
      operationId: addNotification
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
                notificationToAdd:
                  type: string
                  example: "ServiceMesh"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
  /notification/delete:
    put:
      tags:
      - notification
      summary: Delete a notification for a user
      operationId: deleteNotification
      requestBody:
        description: Participant to add to the convo
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "cwylie@redhat.com"
                notificationToDelete:
                  type: string
                  example: "ServiceMesh"
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
                    example: "Updated"
      

components:
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

